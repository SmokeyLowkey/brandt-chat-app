// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant models
model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String?
  slug      String   @unique
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users         User[]
  documents     Document[]
  conversations Conversation[]
  notifications Notification[]

  @@map("tenants")
}

// User model with NextAuth integration
model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole  @default(SUPPORT_AGENT)
  mustChangePassword Boolean   @default(false)
  settings           Json?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Multi-tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  conversations Conversation[]
  notifications Notification[]

  @@index([tenantId])
  @@map("users")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Document management models
model Document {
  id        String   @id @default(cuid())
  name      String
  type      String
  url       String
  status    Status   @default(PROCESSING)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // User relation
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  chunks DocumentChunk[]

  @@index([tenantId])
  @@index([userId])
  @@map("documents")
}

model DocumentChunk {
  id         String   @id @default(cuid())
  content    String   @db.Text
  chunkIndex Int
  vectorId   String?
  createdAt  DateTime @default(now())

  // Document relation
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@map("document_chunks")
}

// Chat models
model Conversation {
  id        String   @id @default(cuid())
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // User relation
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  messages Message[]

  @@index([tenantId])
  @@index([userId])
  @@map("conversations")
}

model Message {
  id        String   @id @default(cuid())
  role      Role
  content   String   @db.Text
  createdAt DateTime @default(now())

  // Conversation relation
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@map("messages")
}

// Notification model
model Notification {
  id        String   @id @default(cuid())
  type      String   // e.g., "document_uploaded", "document_processed"
  title     String
  message   String
  metadata  Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Multi-tenant relation
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // User relation (who created the notification)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([userId])
  @@map("notifications")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  SUPPORT_AGENT
}

enum Status {
  PROCESSING
  PROCESSED
  FAILED
}

enum Role {
  USER
  ASSISTANT
  SYSTEM
}
